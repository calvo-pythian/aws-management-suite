#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse
import argcomplete
import MySQLdb
import settings
import inspect
import os
from amslib.ebs.volume import VolumeManager
from amslib.ebs.snapshot import SnapshotManager
from amslib.instance.instance import InstanceManager
import prettytable
# DO NOT CHANGE THIS VARIABLE
DATABASE_VERSION = 8
#############################


dbconn = MySQLdb.connect(host=settings.TRACKING_DB['host'],
                     port=settings.TRACKING_DB['port'],
                     user=settings.TRACKING_DB['user'],
                     passwd=settings.TRACKING_DB['pass'],
                     db=settings.TRACKING_DB['dbname'])
db = dbconn.cursor()

settings.human_output = True
vm = VolumeManager(settings)
snapmanager = SnapshotManager(settings)
im = InstanceManager(settings)

amsroot = os.path.realpath(os.path.abspath(inspect.getframeinfo(inspect.currentframe()).filename))

def install_db(args):
    filename = os.path.dirname(amsroot) + '/schema/schema.sql'
    sqlfile = open(filename, "r")
    sqlcontents = sqlfile.read()
    statements = sqlcontents.split("\n\n--\n\n")
    for sql in statements:
        db.execute(sql)
        dbconn.commit()
    db.execute("insert into config set var=%s, value=%s", ('DATABASE_VERSION', str(DATABASE_VERSION)))
    dbconn.commit()


def upgrade_db(args):
    pathstub = os.path.dirname(amsroot) + '/schema/versions/'
    filename_stub = 'db-version-'
    extension = '.sql'

    db.execute("select value from config where var='DATABASE_VERSION'")
    v = db.fetchone()
    if not v:
        print "Current DATABASE_VERSION not found, database may need to be installed first"
        return
    version = int(v[0])
    if version == DATABASE_VERSION:
        print "Database is up to date"
        return
    for i in range(version+1, DATABASE_VERSION+1):
        print "Applying version {0}".format(i)
        filename = pathstub + filename_stub + str(i) + extension
        sqlfile = open(filename, "r")
        sqlcontents = sqlfile.read()
        statements = sqlcontents.split("\n\n--\n\n")
        for sql in statements:
            db.execute(sql)
            dbconn.commit()

        db.execute("insert into config set var=%s, value=%s on duplicate key update value=%s", ('DATABASE_VERSION', str(i), str(i)))
        dbconn.commit()



def main():
    parser = argparse.ArgumentParser(prog="ams")
    parser.add_argument("-q", "--scriptable-output", action='store_true', help="removes human readability formatting for scripting purposes")
    #parser.add_argument("type", help="resource type to manage")
    #parser.add_argument("action", help="action to take on resource")
    subparsers = parser.add_subparsers(title="type", dest='type')

    hparser = subparsers.add_parser("host", help="direct host/instance related operations")
    im.build_argument_parser(hparser)

    vparser = subparsers.add_parser("volume", help="EBS volume and software raid operations")
    vm.build_argument_parser(vparser)

    sparser = subparsers.add_parser("snapshot", help="EBS snapshot management operations")
    snapmanager.build_argument_parser(sparser)

    iparser = subparsers.add_parser("internals", help="AMS internal managament")
    isubparser = iparser.add_subparsers(title="type", dest='type')
    dbparser = isubparser.add_parser("database", help="Manage the AMS metadata database")
    dbsubparser = dbparser.add_subparsers(title="action", dest='action')
    p = dbsubparser.add_parser("install", help="Create all the tables for an initial installation")
    p.set_defaults(func=install_db)
    p = dbsubparser.add_parser("upgrade", help="Upgrade the database to the current version for AMS")
    p.set_defaults(func=upgrade_db)

    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    # print args
    if args.scriptable_output:
        settings.human_output = False
    #dispatch(args)
    args.func(args)


if __name__ == "__main__":
    main()


