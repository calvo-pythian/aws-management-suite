#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse
import argcomplete
import MySQLdb
#import settings
import inspect
import os
import logging
from amslib.core.version import DATABASE_VERSION
from amslib.ebs.volume import VolumeManager
from amslib.ebs.snapshot import SnapshotManager
from amslib.instance.instance import InstanceManager
from amslib.network.route53 import Route53Manager
from amslib.core.config import Config
import pprint


settings = Config()

vm = VolumeManager(settings)
snapmanager = SnapshotManager(settings)
im = InstanceManager(settings)
r53 = Route53Manager(settings)

amsroot = os.path.realpath(os.path.abspath(inspect.getframeinfo(inspect.currentframe()).filename))

def upgrade_db(args):
    dbconn = MySQLdb.connect(host=settings.TRACKING_DB['host'],
                         port=settings.TRACKING_DB['port'],
                         user=settings.TRACKING_DB['user'],
                         passwd=settings.TRACKING_DB['pass'],
                         db=settings.TRACKING_DB['dbname'])
    db = dbconn.cursor()
    pathstub = os.path.dirname(amsroot) + '/schema/versions/'
    filename_stub = 'db-version-'
    extension = '.sql'

    if settings.DATABASE_VERSION == DATABASE_VERSION:
        print "Database is up to date"
        return
    for i in range(settings.DATABASE_VERSION + 1, DATABASE_VERSION + 1):
        print "Applying version {0}".format(i)
        filename = pathstub + filename_stub + str(i) + extension
        sqlfile = open(filename, "r")
        sqlcontents = sqlfile.read()
        statements = sqlcontents.split("\n\n--\n\n")
        for sql in statements:
            db.execute(sql)
            dbconn.commit()

        db.execute("insert into config set var=%s, value=%s on duplicate key update value=%s", ('DATABASE_VERSION', str(i), str(i)))
        dbconn.commit()

    db.execute("update config set `type`='int', `description`='Current version of the internal database tables', `configurable`=0 where `var`='DATABASE_VERSION'")
    dbconn.commit()

def main():
    logger = logging.getLogger('ams')
    parser = argparse.ArgumentParser(prog="ams")
    parser.add_argument("-q", "--scriptable-output", action='store_true', help="removes human readability formatting for scripting purposes")

    subparsers = parser.add_subparsers(title="type", dest='type')

    # all of the operational command parsers should be in here to force internals tasks that need to be done
    if settings.DATABASE_VERSION == DATABASE_VERSION:
        hparser = subparsers.add_parser("host", help="direct host/instance related operations")
        im.build_argument_parser(hparser)

        vparser = subparsers.add_parser("volume", help="EBS volume and software raid operations")
        vm.build_argument_parser(vparser)

        sparser = subparsers.add_parser("snapshot", help="EBS snapshot management operations")
        snapmanager.build_argument_parser(sparser)

        r53parser = subparsers.add_parser("route53", help="Route53 management operations")
        r53.build_argument_parser(r53parser)

    iparser = subparsers.add_parser("internals", help="AMS internal managament")
    isubparser = iparser.add_subparsers(title="type", dest='type')
    dbparser = isubparser.add_parser("database", help="Manage the AMS metadata database")
    dbsubparser = dbparser.add_subparsers(title="action", dest='action')
    if settings.DATABASE_VERSION == 0:
        p = dbsubparser.add_parser("install", help="Create all the tables for an initial installation")
        p.set_defaults(func=upgrade_db)
    if settings.DATABASE_VERSION > 0:
        p = dbsubparser.add_parser("upgrade", help="Upgrade the database to the current version for AMS")
        p.set_defaults(func=upgrade_db)


    argcomplete.autocomplete(parser)
    args = parser.parse_args()


    if args.scriptable_output:
        settings.HUMAN_OUPUT = False
    try:
        args.func(args)
    except Exception as e:
        logger.critical(e.__class__.__name__ + ": " + str(e))
        if getattr(settings, 'THROW_ERRORS', False):
            raise


if __name__ == "__main__":
    main()


